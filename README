Take a file containing a SQL query and turn it into a \copy statement for use with psql.

Call query2copy with no arguments for help.

Requires perl.

Examples:

Say you have the following query saved to /tmp/query.sql and want to save the
output to /tmp/contracts.csv:

set work_mem = '16MB';

do $$
begin
    
end;
$$ language plpgsql;

do $$
begin
    perform 'some_temporary_table'::regclass;
exception
    when undefined_table then
        create temporary table some_temporary_table as
        select
            *
        from
            contracts
        where
            client ~ 'Jimmy'
        ;
end;
$$ language plpgsql;

create or replace function pg_temp.helper(val text)
returns integer
as $$
begin
    if val = 'foo' then
        return 1;
    else
        return 0;
    endif;
end;
$$ language plpgsql immutable;

select
    *,
    pg_temp.helper(contract_key)
from
    some_temporary_table
;

query2copy will convert it to this:

set work_mem = '16MB';
do $$
begin
    perform 'some_temporary_table'::regclass;
exception
    when undefined_table then
        create temporary table some_temporary_table as
        select
            *
        from
            contracts
        where
            client ~ 'Jimmy'
        ;
end;
$$ language plpgsql;
create or replace function pg_temp.helper(val text)
returns integer
as $$
begin
    if val = 'foo' then
        return 1;
    else
        return 0;
    endif;
end;
$$ language plpgsql immutable;

\copy (select *, pg_temp.helper(contract_key) from some_temporary_table) to '/tmp/contracts.csv' with csv header

This allows you to use query2copy to convert a query (with sets and helper
functions) into a copy-able statement suitable for use in a pipe. For example:

query2copy /tmp/query.sql /tmp/output.csv | psql 'postgresql:///test'

Will execute the sets, create the functions, run the query, and cause the
output to be saved as a csv.

You can also use '-' as the file to write to stdout, but be aware other output
from psql will be present in the resulting file.

You can also call query2copy with --no-backslash to generate a copy statement
without a backslash.

query2copy can also be called with the option --gzip to generate a program 'gzip > output.csv.gz'
command. For example:

query2copy --gzip /tmp/query.sql /tmp/contracts.csv.gz

Will result in (this example shown with sets/functions):

\copy (select *, pg_temp.helper(contract_key) from contracts) to program 'gzip > /tmp/contracts.csv.gz' with csv header
