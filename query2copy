#!/usr/bin/env perl

use strict;
use warnings;
use autodie;
use IO::Handle;


my $stdin = IO::Handle->new()->fdopen(fileno(STDIN), "r");
my $stdout = IO::Handle->new()->fdopen(fileno(STDOUT), "w");
my $stderr = IO::Handle->new()->fdopen(fileno(STDERR), "w");

my $use_backslash = 1;
my @args = @ARGV;
if (grep { /^--no-backslash$/ } @args) {
    $use_backslash = 0;
}

my $use_gzip = 0;
if (grep { /^--gzip$/ } @args) {
    $use_gzip = 1;
}

@args = grep { !/^--no-backslash$/ } @args;
@args = grep { !/^--gzip$/ } @args;

my $query_path = $args[0];
my $output_path = $args[1];

if (!defined($query_path)) {
    $stderr->print("usage: query2copy query.sql target.csv\n");
    exit(1);
}

if (!defined($output_path)) {
    $stderr->print("usage: query2copy query.sql target.csv\n");
    exit(1);
}

if (! -f $query_path && $query_path ne "-") {
    $stderr->print("file '$query_path' does not exist.\n");
    $stderr->print("usage: query2copy query.sql target.csv\n");
    exit(1);
}

sub escape {
    my $val = shift;

    return $val =~ s/'/''/gr;
}

if ($use_gzip) {
    if ($output_path eq "-") {
        $output_path = "program 'gzip'";
    } else {
        $output_path = "program 'gzip > " . escape($output_path) . "'";
    }
} else {
    if ($output_path eq "-") {
        $output_path = "stdout";
    } else {
        $output_path = "'" . escape($output_path) . "'";
    }
}

my $query = undef;
if ($query_path eq "-") {
    $query = $stdin;
} else {
    open($query, "<", $query_path);
}

my @prepends = ();
my $text = "";

my $is_in_function = 0;
my $saw_function_open_quotes = 0;
my $looking_for_function_end = 0;

while (my $line = <$query>) {
    $line =~ tr/\x{feff}//d;
    $line =~ s/--.*$//;

    # if this line is part of a function definition, put it aside. we'll append
    # it to the top of the buffer we generate later.
    if ($line =~ /create (or replace )?function/) {
        $is_in_function = 1;
    }

    if ($is_in_function) {
        if ($line =~ /\$\w*\$.+\$\w*\$.*;/) {

            $is_in_function = 0;
            $saw_function_open_quotes = 0;
            $looking_for_function_end = 0;

            push(@prepends, $line);
            next;

        } elsif ($line =~ /\$\w*\$.+\$\w*\$.*/) {

            $looking_for_function_end = 1;

            push(@prepends, $line);
            next;


        } elsif ($line =~ /\$\w*\$.*;/) {
            if ($saw_function_open_quotes) {

                $is_in_function = 0;
                $saw_function_open_quotes = 0;
                $looking_for_function_end = 0;

                push(@prepends, $line);
                next;

            } else {
                $saw_function_open_quotes = 1;

                push(@prepends, $line);
                next;
            }
        } elsif ($line =~ /\$\w*\$.*/) {
            if ($saw_function_open_quotes) {

                $looking_for_function_end = 1;

                push(@prepends, $line);
                next;

            } else {

                $saw_function_open_quotes = 1;

                push(@prepends, $line);
                next;
            }
        }

        if ($looking_for_function_end && $line =~ /;/) {
            $is_in_function = 0;
            $saw_function_open_quotes = 0;
            $looking_for_function_end = 0;
        }

        push(@prepends, $line);
        next;
    }

    $line =~ s/^\s+//;
    $line =~ s/\s+$//;

    # if this line starts with \set or set, put it aside. we'll prepend them to
    # the top of the buffer we generate later.
    if ($line =~ /^[\\]?set/) {
        push(@prepends, $line);
        next;
    }

    if (length($line) > 0) {
        $text .= "$line ";
    }
}

$text =~ s!/\*.*?\*/!!g;
$text =~ s/\s+$//;
$text =~ s/;+//;
$text =~ s/\s+$//;

my $set_text = "";
for my $prepend (@prepends) {
    chomp($prepend);
    $set_text .= $prepend . "\n";
}

if ($set_text) {
    $set_text .= "\n";
}

my $copy = "\\copy";
if (!$use_backslash) {
    $copy = "copy";
}

$text = $set_text . "$copy (" . $text . ") to $output_path with csv header\n";

$stdout->print($text);

